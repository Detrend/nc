#include <engine/graphics/resources/mesh.h>

#include <vector>

namespace nc
{

//==============================================================================
// Vertex data for cube mesh. Generated by deepseek ai.
constexpr f32 cube_vertices[] =
{
  // Positions          // Normals
  // Front face
  -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Bottom-left
   0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Bottom-right
   0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Top-right
   0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Top-right
  -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Top-left
  -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Bottom-left

  // Back face
  -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Bottom-left
   0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Top-right
   0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Bottom-right
   0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Top-right
  -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Bottom-left
  -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Top-left

  // Left face
  -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f, // Top-front
  -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f, // Bottom-back
  -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f, // Bottom-front
  -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f, // Bottom-back
  -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f, // Top-front
  -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f, // Top-back

  // Right face
   0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f, // Bottom-front
   0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f, // Bottom-back
   0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f, // Top-front
   0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f, // Top-back
   0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f, // Top-front
   0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f, // Bottom-back

  // Top face
  -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, // Back-left
   0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f, // Front-right
   0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, // Back-right
   0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f, // Front-right
  -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, // Back-left
  -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f, // Front-left

  // Bottom face
  -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f, // Back-left
   0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f, // Back-right
   0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f, // Front-right
   0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f, // Front-right
  -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f, // Front-left
  -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f  // Back-left
};

//==============================================================================
GLuint Mesh::get_vao() const
{
  return m_vao;
}

//==============================================================================
GLuint Mesh::get_vbo() const
{
  return m_vbo;
}

//==============================================================================
u32 Mesh::get_vertex_count() const
{
  return m_vertex_count;
}

//==============================================================================
GLenum Mesh::get_draw_mode() const
{
  return m_draw_mode;
}

//==============================================================================
bool Mesh::is_valid() const
{
  if (m_lifetime == ResLifetime::Game && m_generation != MeshManager::generation)
  {
    return false;
  }

  return m_vao != 0 && m_vbo != 0 && m_vertex_count != 0 && m_lifetime != ResLifetime::None;
}

//==============================================================================
Mesh::operator bool() const
{
  return this->is_valid();
}

//==============================================================================
Mesh Mesh::invalid()
{
    return Mesh();
}

//==============================================================================
void MeshManager::init()
{
  m_cube_mesh = this->create<ResLifetime::Game>(cube_vertices, sizeof(cube_vertices) / sizeof(f32));
}

//==============================================================================
Mesh MeshManager::get_cube() const
{
  return m_cube_mesh;
}

}
